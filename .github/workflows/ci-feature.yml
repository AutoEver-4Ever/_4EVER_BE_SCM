name: CI - Feature Branch

on:
  push:
    branches:
      - '**'
      - '!main'
      - '!dev'

jobs:
  test:
    name: 단위 테스트
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle 의존성 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 단위 테스트 실행
        run: ./gradlew test --no-daemon

      - name: 테스트 결과 파일 확인
        id: test-results
        if: always()
        run: |
          if find . -path '**/build/test-results/test/*.xml' -type f | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 테스트 리포트 생성
        if: always() && steps.test-results.outputs.exists == 'true'
        uses: dorny/test-reporter@v1
        with:
          name: 테스트 결과 - ${{ github.ref_name }}
          path: '**/build/test-results/test/*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: 테스트 실패 시 코멘트
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `❌ **테스트 실패**

            브랜치: \`${{ github.ref_name }}\`
            커밋: ${{ github.sha }}

            [워크플로우 로그 확인](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Pull Request를 생성하기 전에 테스트를 수정해주세요.`;

            // PR이 있으면 PR에 코멘트
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });

            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prs.data[0].number,
                body: message
              });
            }

      - name: 테스트 성공 시 체크 표시
        if: success()
        run: |
          echo "✅ 모든 테스트가 성공했습니다."
          echo "Pull Request를 생성할 수 있습니다."
