name: CI - Main Branch

on:
  push:
    branches:
      - main

jobs:
  test:
    name: 단위 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle 의존성 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 단위 테스트 실행
        run: ./gradlew test --no-daemon

      - name: 테스트 결과 파일 확인
        id: test-results
        if: always()
        run: |
          if find . -path '**/build/test-results/test/*.xml' -type f | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 테스트 리포트 생성
        if: always() && steps.test-results.outputs.exists == 'true'
        uses: dorny/test-reporter@v1
        with:
          name: 테스트 결과 - Main
          path: '**/build/test-results/test/*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: 테스트 커버리지 리포트 업로드
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-main
          path: build/reports/tests/test/
          retention-days: 30

  build:
    name: 빌드 검증
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: 애플리케이션 빌드
        run: ./gradlew clean build -x test --no-daemon

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Docker 이미지 빌드 테스트 (Production)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: hojipkim/everp_scm:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: CI 결과 알림
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
      - name: CI 결과 설정
        id: ci-result
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "status=성공" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "next_step=CD 파이프라인이 곧 시작됩니다." >> $GITHUB_OUTPUT
          else
            echo "status=실패" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "next_step=CD 파이프라인이 취소되었습니다." >> $GITHUB_OUTPUT
          fi

      - name: Slack 알림 전송
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "Main 브랜치 CI ${{ steps.ci-result.outputs.status }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ steps.ci-result.outputs.emoji }} Main 브랜치 CI ${{ steps.ci-result.outputs.status }}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*저장소:*\n${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*브랜치:*\n`main`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*커밋:*\n`${{ github.sha }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*작성자:*\n${{ github.actor }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*테스트:*\n${{ needs.test.result == 'success' && '✅ 성공' || '❌ 실패' }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*빌드:*\n${{ needs.build.result == 'success' && '✅ 성공' || '❌ 실패' }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ steps.ci-result.outputs.next_step }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "워크플로우 보기"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }'
